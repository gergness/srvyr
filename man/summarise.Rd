% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarise.r
\name{summarise}
\alias{summarise}
\alias{summarize}
\title{Summarise multiple values to a single value.}
\arguments{
\item{.data}{tbl A \code{tbl_svy} object}

\item{...}{Name-value pairs of summarizing expressions, see details}

\item{.groups}{Defaults to "drop_last" in srvyr meaning that the last group is peeled
off, but if there are more groups they will be preserved. Other options are "drop", which
drops all groups, "keep" which keeps all of them and "rowwise" which converts the object
to a rowwise object (meaning calculations will be performed on each row).}

\item{.unpack}{Whether to "unpack" named \code{data.frame} columns. \code{srvyr} predates
\code{dplyr}'s support for data.frame columns so it does not treat them the same way by
default.}
}
\description{
Summarise multiple values to a single value.
}
\details{
Summarise for \code{tbl_svy} objects accepts several specialized functions.
Each of the functions a variable (or two, in the case of
\code{survey_ratio}), from the data.frame and default to providing the measure
and its standard error.

The argument \code{vartype} can choose one or more measures of uncertainty,
\code{se} for standard error, \code{ci} for confidence interval, \code{var}
for variance, and \code{cv} for coefficient of variation. \code{level}
specifies the level for the confidence interval.

The other arguments correspond to the analagous function arguments from the
survey package.

The available functions from srvyr are:

\describe{
\item{\code{\link{survey_mean}}}{
   Calculate the survey mean of the entire population or by \code{groups}.
   Based on \code{\link[survey]{svymean}}.}
\item{\code{\link{survey_total}}}{
   Calculate the survey total of the entire population or by \code{groups}.
   Based on \code{\link[survey]{svytotal}}.}
 \item{\code{\link{survey_ratio}}}{
   Calculate the ratio of 2 variables in the entire population or by \code{groups}.
   Based on \code{\link[survey]{svyratio}}.}
\item{\code{\link{survey_quantile}}}{
   Calculate quantiles in the entire population or by \code{groups}. Based on
   \code{\link[survey]{svyquantile}}.}
 \item{\code{\link{survey_median}}}{
   Calculate the median in the entire population or by \code{groups}.
   \code{\link[survey]{svyquantile}}.}
 \item{\code{\link{unweighted}}}{
   Calculate an unweighted estimate as you would on a regular \code{tbl_df}.
   Based on dplyr's \code{\link[dplyr]{summarise}}.}
}

You can use expressions both in the \code{...} of \code{summarize} and also
in the arguments to the summarizing functions. Though this is valid syntactically
it can also allow you to calculate incorrect results (for example if you multiply
the mean by 100, the standard error is also multipled by 100, but the variance
is not).
}
\examples{
library(survey)
data(api)

dstrata <- apistrat \%>\%
  as_survey_design(strata = stype, weights = pw)

dstrata \%>\%
  summarise(api99_mn = survey_mean(api99),
            api00_mn = survey_mean(api00),
            api_diff = survey_mean(api00 - api99))

dstrata_grp <- dstrata \%>\%
  group_by(stype)

dstrata_grp \%>\%
  summarise(api99_mn = survey_mean(api99),
            api00_mn = survey_mean(api00),
            api_diff = survey_mean(api00 - api99))

# Expressions are allowed in summarize arguments & inside functions
# Here we can calculate binary variable on the fly and also multiply by 100 to
# get percentages
dstrata \%>\%
  summarize(api99_over_700_pct = 100 * survey_mean(api99 > 700)

# But be careful, the variance doesn't scale the same way, so this is wrong!
dstrata \%>\%
  summarize(api99_over_700_pct = 100 * survey_mean(api99 > 700, vartype = "var")
# Wrong variance!

}
